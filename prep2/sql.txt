-- ** Fancier INSERT ALL
CREATE TABLE table_setA (
  col1 varchar(1));

CREATE TABLE table_setB (
  col1 varchar(1));

INSERT ALL
  INTO table_setA values (col1)
  INTO table_setB values (CHR(ASCII(col1) + 1))
  WITH abc AS
    (SELECT 'A' col1 FROM DUAL
    UNION
    SELECT 'B' col1 FROM DUAL
    UNION
    SELECT 'C' col1 FROM DUAL)
  SELECT col1 FROM abc
  UNION ALL
  SELECT col1 FROM abc;

-- ** TODO: LIST ALL OF COMMON COLUMNS THAT WOULD BE USED FOR A NATURAL JOIN.
  WITH airport_cols AS
    (SELECT column_name from all_tab_cols where table_name='AIRPORTS'),
    aircraft_fleet_cols AS
    (SELECT column_name from all_tab_cols where table_name='AIRCRAFT_FLEET'),
    aircraft_cols AS
    (SELECT column_name from all_tab_cols where table_name='AIRCRAFT_TYPES'),
    employees_cols AS
    (SELECT column_name from all_tab_cols where table_name='EMPLOYEES'),
    all_cols AS (
      SELECT * FROM airport_cols 
      UNION 
      SELECT * FROM aircraft_fleet_cols
      UNION
      SELECT * FROM aircraft_cols
      UNION
      SELECT * FROM employees_cols
    )
  (SELECT * FROM airport_cols
   INTERSECT
   SELECT * FROM aircraft_fleet_cols)
  UNION
  (SELECT * FROM airport_cols
   UNION 
   SELECT * FROM aircraft_fleet_cols
   INTERSECT
   SELECT * FROM aircraft_cols)
  UNION
  (SELECT * FROM airport_cols
   UNION 
   SELECT * FROM aircraft_fleet_cols
   UNION
   SELECT * FROM aircraft_cols
   INTERSECT
   SELECT * FROM employees_cols
   );
-- ******************

-- TODO: --

p.26
get act_seats from aircraft_flights, act_name is Boeing 787

p.27
print apt_id, apt_name, apt_abbr from airports

p.27
everything from airports

p.28
airports and aircraft_fleet when apt_id are equa;

p.29
only all columns from apt table joined with aircraft_fleet when apt_id are equal

p.29
apt_abbr, apt_name, act_id from joined airport + aircraft_fleet when apt_id are equal
use aliases for airport (apt) and aircraft fleet (afl)

** FINISHED AT 32 **
SELECT emp_last, emp_first, salary * 1.05 SAL_WITH_RAISE
FROM employees
WHERE emp_job = 'Pilot'
ORDER BY salary DESC;

SELECT SYSDATE, SYSDATE+5 FROM DUAL;

-- Auto-ALIASING and aliasing IN TWO DIFFERENT WAYS:
SELECT emp_first, emp_last, emp_firsst || ' ' || emp_last
FROM employees WHERE emp_job = 'CEO';

SELECT emp_first, emp_last, emp_first || ' ' || emp_last full_name
FROM employees
WHERE emp_job = 'CEO'

-- p.39 -> Reusing aliases.
SELECT NAME, STYLE, DECKS, SEATS
FROM
(
SELECT act_name as name,
       act_body_style as style,
	   act_decks as decks,
	   act_seats as seats
FROM aircraft_types
ORDER BY act_seats
)
WHERE decks = 'Single'
ORDER BY name;


-- p.41: Sorting by characters is case-sensitive:

select num_column from prep071.sort_example order by num_column;
select char_column from prep071.sort_example order by char_column;
select num_column from prep071.sort_example order by TO_CHAR(num_column);

SELECT * FROM aircraft_fleet ORDER BY apt_id NULLS FIRST;

--
SELECT + SUBQUERIES: -> p.44.

SELECT emp_job, 
  (SELECT act_name FROM aircraft_types act NATURAL JOIN aircraft_fleet afl
   WHERE afl.afl_id = e1.afl_id) AS aircraft_type,
   emp_last,
  (SELECT emp_last FROM employees e2
   WHERE e2.emp_id = e1.emp_supervisor) AS MANAGER
FROM employees e1
ORDER BY emp_job, aircraft_type DESC, emp_last;

-- p.45 DISTINCT
SELECT DISTINCT act_body_style, act_decks FROM aircraft_types;
SELECT UNIQUE apt.* FROM airports apt JOIN aircraft_fleet afl ON apt.apt_id = afl.apt_id;

-- p.46 WHERE
-- TOOD: Add more p.47-50
SELECT NAME, STYLE, DECKS, SEATS FROM
  (SELECT ACT_NAME AS NAME,
          ACT_BODY_STYLE AS STYLE,
		  ACT_DECKS AS DECKS,
		  ACT_SEATS AS SEATS
  FROM aircraft_types)
WHERE decks='Single';

  --p.50 TODO: Combining two or more conditions with Logical Operators (p.50)
  

-- p.54 Ampersand:
SELECT act_name, act_body_style, act_decks FROM aircraft_types WHERE act_name = '&AIRCRAFT_NAME';
SELECT apt_name, apt_abbr, act_name, &COLUMN_NAME FROM aircraft_fleet WHERE &WHERE_CLAUSE ORDER BY &ORDER_BY;

  -- TODO: 58

-- p.58: DEFINE+UNDEFINE  
DEFINE variable_name
UNDEFINE variable_name


-- ************
-- p.59 USE SQL ROW LIMITING CLAUSE
-- *************

-- This will generate messed-up results, as WHERE rownum < 6 is executed before ORDER BY:
SELECT apt_name, apt_abbr, act_name
FROM aircraft_fleet_v
WHERE rownum < 6
ORDER BY apt_name, act_name;

-- This is better:
SELECT apt_name, apt_abbr, act_name
FROM aircraft_fleet_v
ORDER BY apt_name, act_name
FETCH FIRST 5 ROWS ONLY;

-- TODO: NEED TO READ ABOUT OFFSET -> https://oracle-base.com/articles/12c/row-limiting-clause-for-top-n-queries-12cr1
SELECT apt_name, apt_abbr, act_name FROM aircraft_fleet_v
ORDER BY apt_name DESC, act_name DESC
FETCH FIRST 5 ROWS ONLY;

SELECT apt_name, apt_abbr, act_name FROM aircraft_fleet_v
ORDER BY apt_name DESC, act_name DESC
FETCH FIRST 5 ROWS WITH TIES;

SELECT apt_name, apt_abbr, act_name FROM aircraft_fleet_v
ORDER BY apt_name DESC, act_name DESC
FETCH FIRST 10 PERCENT ROWS WITH TIES;

SELECT apt_name, apt_abbr, act_name FROM aircraft_fleet_v ORDER BY apt_name DESC, act_name DESC
FETCH FIRST 1 PERCENT ROWS WITH TIES;

SELECT apt_name, apt_abbr, act_name FROM aircraft_fleet_v ORDER BY apt_name DESC, act_name DESC
FETCH FIRST 1 PERCENT ROWS ONLY;

-- ************
-- p.63 USE SINGLE ROW FUNCTIONS
-- *************
-- CEIL, FLOOR, ROUND, SIGN, INITCAP, LPAD, RPAD, LTRIM, SUBSTR, UPPER
-- TODO: ABS, ASCII, NVL2.
-- 

  -- Using funciton in WHERE and ORDER BY clause
SELECT apt_name, apt_abbr, 
FROM airports
WHERE substr(UPPER(apt_name), 3, 1) = 'L'
ORDER BY substr(apt_name, -1, 1);

-- p.74 Numeric functions:
-- p.75 Date functions:

SELECT emp_first, emp_last, MONTHS_BETWEEN(SYSDATE, start_date) as months_since_hire
FROM employees
WHERE emp_job = 'Pilot';

  -- TODO: p.76 -> truncating data bottom code.
  -- TODO: p.77, 78 -> code (date manipulation)
  
  -- p.79 RR dates

-- ************
-- p.80 USE SINGLE ROW FUNCTIONS -> ANALYTIC FUNCTIONS.
-- Read more here: https://oracle-base.com/articles/misc/analytic-functions
--   https://docs.oracle.com/database/121/SQLRF/functions004.htm#SQLRF06174
--   http://www.oracle.com/technetwork/database/bi-datawarehousing/wp-in-database-analytics-12c-2132656.pdf
-- *************
select UPPER(ACT_BODY_STYLE) act_body_style, act_seats from aircraft_types;
select act_body_style, avg(act_seats) avg_seats from aircraft_types GROUP BY act_body_style;
-- +OVER (partitioning_clause)
select act_body_style, act_seats, avg(act_seats) over (partition by act_body_style) avg_by_style FROM aircraft_types;
--  -PARTITION BY:
SELECT act_body_style, act_seats, avg(act_seats) over () avg_over_all FROM aircraft_types;
-- p.82: +(PARTITION BY x ORDER BY y)
SELECT act_body_style, act_seats, avg(act_seats) OVER (partition by act_body_style ORDER BY act_seats) AVG_BY_STYLE from aircraft_types;
-- p.83 -> TODO: Windowing stuff !!!!
SELECT act_Body_style, act_seats, PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY act_seats) OVER (partition by act_body_style) pc_by_style FROM aircraft_types; 
  SELECT x, y, PERCENTILE_CONT(0.5) WITHIN GROUP(ORDER by x) OVER (PARTITION BY x) from NUMS_XY ORDER BY 2;
-- p.84 -> TODO more of these:
SELECT act_body_style, act_seats, STDDEV(act_seats) OVER (PARTITION BY act_body_style) STDV_BY_STYLE FROM aircraft_types;
  SELECT x, STDDEV(x) OVER () FROM nums;
  SELECT x,y, STDDEV(x) OVER (PARTITION BY power(x-y,2)) FROM nums_xy;
-- p.85-86 LAG
  SELECT act_body_style, act_seats, LAG(act_seats, 2) OVER (order by act_seats) lag_by_style FROM aircraft_types;
  SELECT act_body_style, act_seats, LEAD(act_seats, 2) OVER (order by act_seats) lead_by_style FROM aircraft_types;
-- p.86 LISTAGG -> Look online here: https://oracle-base.com/articles/misc/string-aggregation-techniques
SELECT LISTAGG(act_name, ':')
  WITHIN GROUP (ORDER BY act_seats, act_name) AIRCRAFT_NAME
  FROM aircraft_types
  WHERE act_decks = 'Single'
SELECT LISTAGG(x, ':')
  WITHIN GROUP (ORDER BY x DESC) concatenated
  FROM nums_xy 
  WHERE y = 1;
SELECT LISTAGG(x*y, ':')
  WITHIN GROUP (ORDER BY x DESC) concatenated
  FROM nums_xy 
  WHERE y = 5;

-- ************************************************************  
-- p.87 Using conversion functions and conditional expressions
-- ************************************************************  
-- p.88 Implicit conversion -> TODO: Try with 10-JANUARY-1983 and 10-JAN-1983, then 10-01-1983 which ones will work properly;?
-- p.89 Explicit conversion.
  -- TODO: Code from 89
-- p.90,91 (TO_CHAR, TO_NUMBER(expr, fmt, nlsparam))  
  -- TODO: Try different nlsparams; try with BINARY_DOUBLE; T0_DATE function p.92
  -- p.93  -> Julian calendar from Integer:
  
  SELECT TO_DATE(2457927, 'J') AS "TO_DATE_EX" from DUAL;
  SELECT TO_CHAR(TO_DATE(123134,'J'), 'DD-MON-YYYY HH24:MM CC') AS "To_date_ex" FROM DUAL;  
  SELECT to_char(SYSDATE, 'DD-MON-YYYY, CC, "Julian: "J') from DUAL;

-- p.93-94 Format modifiers (fx vs fm)
SELECT TO_DATE('February 23,  2012, 2:23 P.M.', 'fxMonth dd, YYYY, HH:MI A.M.') as "To date ex" FROM DUAL;

-- What is the difference with and without fm?:
SELECT TO_CHAR(SYSDATE, 'fmMonth DD HH24:MI') AS no_fm FROM DUAL;
SELECT TO_CHAR(SYSDATE, 'Month DD HH24:MI') AS no_fm FROM DUAL;

-- p.95 General functions + conditional expressions.
SELECT emp_first || ' ' || emp_last,
  CASE emp_job
  WHEN 'CEO' THEN 'This is the big Kahuna'
  WHEN 'CFO' THEN 'The dude holding the piggy bank'
  WHEN 'SVP' THEN 'Senior right-hand guy'
  WHEN 'VP' THEN 'Right-hand guy'
  WHEN 'SrDir' THEN 'Middle Management'
  WHEN 'Mgr' THEN 'Lower Management'
  ELSE 'Just another person'
END CASE
FROM employees

SELECT act_name, act_seats,
  CASE 
    WHEN act_seats < 220 THEN 'Small plane'
	WHEN act_seats > 250 THEN 'Bigger plane'  
	WHEN act_seats > 400 THEN 'Jumbo airplane' -- This statement is unreachable
    ELSE 'Invalid value'
  END
FROM aircraft_types;

SELECT act_name, act_seats,
  CASE 
    WHEN act_seats < 220 THEN 'Small plane'
	WHEN act_seats > 250 THEN 'Bigger plane'  
	WHEN act_seats > 400 THEN 'Jumbo airplane' -- This statement is unreachable
    ELSE 'Invalid value'
  END
FROM (SELECT act_name, act_seats FROM aircraft_types 
UNION SELECT 'Boeing 797' act_name, null act_seats FROM dual);

-- Decode -> p.97
SELECT apt_name, DECODE(apt_abbr,
  'MCO', 'Going to Disneyworld',
  'MIA', 'CSI Miami, here I come',
  'ATL', 'Need to get some peaches',
  'DFW', 'Everything is bigger in Texas',
  'Is Jacksonville known for anything?')
  AS DC_RETVAL
FROM airports;
  
)

-- ************************************
-- p.98 Reporting aggregated data using group functions.
-- ************************************
-- TODO: AVG, COUNT
-- P.100 -> MEDIAN:
SELECT emp_job, MEDIAN(salary)
FROM employees
GROUP BY emp_job
GROUP BY MEDIAN(salary) DESC;

SELECT emp_job, MEDIAN(salary)
FROM employees
GROUP BY emp_job
ORDER BY MEDIAN(salary) DESC;

	SELECT MEDIAN(x) FROM (
	  SELECT 1 x FROM DUAL
	  UNION SELECT 2 x FROM DUAL
	  UNION SELECT 3 x FROM DUAL
	  UNION SELECT 4 x FROM DUAL
	  UNION SELECT 10 x FROM DUAL
	);

	SELECT MEDIAN(x) FROM (
	  SELECT 1 x FROM DUAL UNION
	  SELECT 2 x FROM DUAL UNION
	  SELECT 9 x FROM DUAL UNION
	  SELECT 10 x FROM DUAL
	);

	SELECT MIN(start_date) "Earliest"
	FROM employees;
	
-- p.101 MIN
-- P.102 MAX
-- p.103 SUm
-- p.103 COUNT + ALL
SELECT COUNT(DISTINCT emp_job) distinct_values,
  COUNT(ALL emp_job) AS all_values
FROM employees;
	
SELECT COUNT(DISTINCT emp_job) distinct_values,
  COUNT(emp_job) AS all values
FROM employees;

SELECT MAX(emp_first) AS "Max_first"
  MAX(start_date) AS "Max_start"
FROM employees;

  -- will fail cannot do AVG over dates:
  -- SELECT AVG(start_date) FROM employees; 

-- *****************
--p.105 GROUP DATA BY USING GROUP BY Clause
-- *****************
SELECT emp_job, MAX(salary) max_salary
FROM employees
GROUP BY emp_job;

SELECT emp_job, MAX(salary) max_salary
FROM employees
GROUP BY emp_job
ORDER BY emp_job;

SELECT apt_name, SUM(act_seats)
FROM aircraft_fleet_v
GROUP BY apt_name;

SELECT apt_name, act_name, SUM(act_seats)
FROM aircraft_fleet_v
GROUP BY apt_name, act_name;

SELECT AVG(act_seats) FROM aircraft_types GROUP BY act_decks;
SELECT MAX(AVG(act_seats)) FROM aircraft_types GROUP BY act_decks;
-- An error will be returned (too deeply nested)
  -- SELECT COUNT(MAX(AVG(act_seats))) FROM aircraft_Types GROUP BY act_decks;

  
SELECT emp_job, MAX(salary) max_salary
FROM employees
GROUP BY emp_job
HAVING MAX(salary) > 111500
AND emp_job != 'CEO'
ORDER BY emp_job;

SELECT emp_job, MAX(salary) max_salary
FROM employees
WHERE emp_job != 'CEO'
GROUP BY emp_job
HAVING MAX(salary) > 111500
ORDER BY emp_job;

-- *************************************
-- Displaying data from multiple tables
-- *************************************
SELECT apt_name, apt_abbr, act_name, act_seats
FROM airports apt
  INNER JOIN aircraft_fleet afl
  ON apt.apt_id = afl.apt_id
  INNER JOIN aircraft_types act
  ON act.act_id = afl.act_id;

  -- TODO: p.114
  -- p.115 Equijoins  
  SELECT apt_name, act_name, emp_first, emp_last
  FROM airports apt
  INNER JOIN aircraft_fleet afl
  ON apt.apt_id = afl.apt_id
  INNER JOIN aircraft_types act
  ON act.act_id = afl.act_id
  INNER JOIN employees emp
  ON afl.afl_id = emp.afl_id;  
  
  -- p.116
  SELECT apt_name, act_name, emp_first, emp_last
  FROM airports apt
  NATURAL JOIN aircraft_fleet afl
  NATRUAL JOIN aircraft_types act
  NATURAL JOIN employees emp;
  
  --
  p.117
  SELECT apt_name, act_name, emp_first, emp_last
  FROM airports apt
  JOIN aircraft_fleet afl USING (apt_id)
  JOIN aircraft_types act USING (act_id)
  JOIN employees emp USING (afl_id);
  
  SELECT apt_name, act_name, emp_first, emp_last
  FROM airports apt
    JOIN aircraft_fleet afl ON (apt.apt_id = afl.apt_id)
	JOIN aircraft_types act ON (afl.act_id = act.act_id)
	JOIN employees emp ON (afl.afl_id = emp.afl_id);

-- p.118 NoneEquijoins
SELECT emp.emp_first, emp.emp_last, salary, slr_code
FROM employees emp
  INNER JOIN salary_ranges slr
  ON emp.salary BETWEEN slr.slr_lowval AND slr.slr_highval
  ORDER BY slr_code DESC;    
  
  -- Additional JOIN conditions (multiple join conditions)
  SELECT apt_name, act_name, emp_first, emp_last
  FROM airports apt
  JOIN aircraft_fleet afl ON (apt.apt_id = afl.apt_id)
  JOIN aircraft_types act ON (afl.act_id = act.act_id)
    AND act.act_name = 'Boeing 767'
  JOIN employees emp ON (afl.afl_id = emp.afl_id);
  
  -- Alternatively you can pull additional condition to the WHERE clause:
  SELECT apt_name, act_name, emp_first, emp_last
  FROM airports apt
  JOIN aircraft_fleet afl ON (apt.apt_id = afl.apt_id)
  JOIN aircraft_types act ON (afl.act_id = act.act_id)
  JOIN employees emp ON (afl.afl_id = emp.afl_id)
  WHERE act.act_name = 'Boeing 767';
  
-- p.119 Join table to itself using a self-join:
  SELECT emp.emp_first, emp_last, mgr.emp_first || ' ' || mgr.last_name
  FROM employees emp
  LEFT JOIN employees mgr ON (emp.emp_supervisor = mgr.emp_id)
  
 SELECT emp.emp_first, emp.emp_last, nvl2(mgr.emp_id, mgr.emp_first || ' ' || mgr.emp_last, '--none--') 
  FROM employees emp
  LEFT JOIN employees mgr ON (emp.emp_supervisor = mgr.emp_id)
  ORDER BY NVL(mgr.emp_id, 0), emp.emp_last, emp.emp_first 
 
  -- p.120 => CONNECT BY (APPARENTLY NOT ON THE EXAM)
  -- Well described here: https://docs.oracle.com/cd/B19306_01/server.102/b14200/queries003.htm
  SELECT level, emp_first, emp_last, emp_job, emp_id, emp_supervisor
  FROM employees emp
  START WITH emp_supervisor IS NULL
  CONNECT BY PRIOR emp_id = emp_supervisor;  
  
   --> TODO -> practice more with CONNECT BY
   
-- ********************
-- p.121 Viewing data that generally does not meet a join condition by using outer joins
-- ********************

CREATE TABLE table_A (
  col1 NUMBER,
  col2 VARCHAR2(1)
);

CREATE TABLE table_B (
  col1 NUMBER
  col2 VARCHAR2(1)
)

INSERT INTO table_A values(1,'a');
INSERT INTO table_A values(2,'b');
INSERT INTO table_A values(3,'c');

INSERT INTO table_B values(2,'B');
INSERT INTO table_B values(3,'C');
INSERT INTO table_B values(4,'D');

SELECT a.col1 AS TA_COL1, a.col2 AS TA_col2,
       b.col1 AS TB_COL1, b.col2 AS TB_col2
FROM table_A a
  INNER JOIN table_B b ON a.col1 = b.col1;

SELECT a.col1 AS TA_COL1, a.col2 AS TA_COL2,
       b.col1 AS TB_COL1, b.col2 AS TB_COL2
FROM table_A a
  RIGHT JOIN table_B b ON a.col1 = b.col1;

SELECT a.col1 AS TA_COL1, a.col2 AS TA_COL2,
       b.col1 AS TB_COL1, b.col2 AS TB_COL2
FROM table_A a
  LEFT JOIN table_B b ON a.col1 = b.col1;

SELECT a.col1 AS TA_COL1, a.col2 AS TA_COL2,
       b.col1 AS TB_COL1, b.col2 AS TB_COL2
FROM table_A a
  FULL OUTER JOIN table_B b ON a.col1 = b.col1;  

-- **********************************************
-- p.125 Using Subqueries to Solve Queries
-- **********************************************


-- Inline subquery example (p.125)  
SELECT apt_name, act_name, sum_seats
FROM (SELECT apt_name, act_name, SUM(act_seats) sum_seats
      FROM aircraft_fleet_v
	  GROUP BY apt_name, act_name)
ORDER BY sum_seats;


-- Nested subquery example (p.126)
SELECT emp_first, emp_last, emp_job
FROM employees emp
WHERE salary > (SELECT slr_highval FROM salary_ranges WHERE slr_code='S05');

-- p.127 In SELECT LIST; FROM Clause; WHERE Clause; HAVING clause:
SELECT col1, col2, (SELECT expr FROM table) as sqexp
FROM table_name;

SELECT col1, col2, col3 
FROM (select col1, col2, col3 FROM table_name);

SELECT col1, col2, col3
FROM table_name
WHERE col1 = (SELECT col1 FROM table_name2);

SELECT col1, col2, SUM(col3)
FROM table_name
GROUP BY col1, col2
HAVING SUM(col3) > (SELECT expr FROM table_name);

-- p.128 - Describe the types of problems subqueries can solve.
  -- Create a table equivalent to SELECT From
SELECT emp_job, avg_sal, min_sal || ' - ' || max_sal AS salary_range
FROM (SELECT emp_job, AVG(salary) AVG_SAL, MIN(salary) MIN_SAL, MAX(salary) MAX_SAL
  FROM employees
  GROUP BY emp_job)
ORDER BY max_sal DESC;

  -- p.128 Generate a Result Set to Filter by
SELECT apt_name, apt_abbr
FROM airports apt
WHERE apt.apt_id IN (
  SELECT apt_id
  FROM aircraft_types act
  INNER JOIN aircraft_fleet afl
  ON act.act_id = afl.act_id
  WHERE act_name='Boeing 747');

  -- p.129 Generate Projection Columns
  -- TODO: Rewrite the code.
  
  -- p.129 Generate Data FOR INSERT, UPDATE or DELETE ()
   --[?]: INSERT INTO x values (SELECT 2 FROM DUAL);
   -- P:130: INSERT, UPDATE, DELETE
   INSERT INTO aircraft_types (act_name, act_body_style, act_decks, act_seats)
      SELECT 'Boeing 787', act_body_style, act_decks, 300
	  FROM aircraft_types
	  WHERE act_name = 'Boeing 767';
  -- TODO: Rewrite code from page 130 for UPDATE and DELETE statements
  
-- p.130 Describe the types of subqueries
  -- Single Row Subqueries
    -- TODO: Rewrite code from 131.
  -- Multiple Row Subqueries
    -- TODO: Rewrite code from 131.
  -- p.131 Correlated subqueries
    -- TODO: Rewrite code from 132/TOP
	
-- p.132 Query data using correlated subqueries
    -- TODO: Code 132/BOTTOM.
	SELECT emp_first, emp_last, salary
	FROM employees emp1
	WHERE salary < (SELECT AVG(SALARY) from EMPLOYEES emp2
	  WHERE emp1.emp_job = emp2.emp_job);

-- p.132 Update and delete rows using correlated subqueries
  -- SKIPPED; TODO: pages 133 - 135
  
-- ***************************************
-- P.135 Use the WITH clause.
-- ***************************************

-- p.136
WITH
  dept_costs AS (
    SELECT department_name, SUM(salary) dept_total
    FROM hr.employees e
    INNER JOIN hr.departments d
    ON e.department_id = d.department_id
    GROUP BY department_name),
  avg_cost AS (
    SELECT SUM(dept_total)/COUNT(*) avrg
	FROM dept_costs)
SELECT * FROM dept_costs
  WHERE dept_total > (SELECT avrg FROM avg_cost)
ORDER BY department_name;

-- *************************************************
-- p.136 * Use single-row and multiple-row subqueries 
-- *************************************************
  -- a) Single Row Opeartors (=, <, >, >=, <, <= <> !=)
  -- b) Multiple Row Opearators (IN, NOT IN, ANY, ALL, EXISTS, NOT EXISTS)
  
  -- a) Single row subqueries
  SELECT apt_name, apt_abbr, act_name, act_seats
  FROM airports apt
    INNER JOIN aircraft_fleet afl
    ON apt.apt_id = afl.apt_id
    INNER JOIN aircraft_types act
    ON act.act_id = afl.act_id
  WHERE afl_id = (
    SELECT afl_id
	FROM employees
	WHERE emp_last = 'Picard');
	
	-- Alternative with JOIN and NOT subquery
	SELECT apt_name, apt_abbr, act_name, act_seats
	FROM airports apt
	  INNER JOIN aircraft_fleet afl
	  ON apt.apt_id = afl.apt_id
	  INNER JOIN aircraft_types act
	  ON act.act_id = afl.act_id
	  INNER JOIN employees emp
	  ON emp.afl_id = afl.afl_id
	  AND emp.emp_last = 'Picard';

  -- [p.137] b) Multiple Row Opearators (IN, NOT IN, ANY, ALL, EXISTS, NOT EXISTS)
  SELECT apt_name, apt_abbr, act_name, act_seats
  FROM airports apt
    INNER JOIN aircraft_fleet afl
	ON apt.apt_id = afl.apt_id
	INNER JOIN aircraft_types act
	ON act.act_id = afl.act_id
	WHERE afl_id IN (
	  SELECT afl_id
	  FROM employees
	  WHERE emp_last IN ('Picard','McCoy','Aptop'));
	  
	-- p.138 Alternative with JOIN and NOT subquery [FOR multiple-row subqueries]
	SELECT apt_name, apt_abbr, act_name, act_seats
	FROM airports apt
	  INNER JOIN aircraft_fleet afl
	  ON apt.apt_id = afl.apt_id
	  INNER JOIN aircraft_types act
	  ON act.act_id = afl.act_id
	  INNER JOIN employees emp
	  ON emp.afl_id = afl.afl_id
	  AND emp_last IN ('Picard','McCoy','Aptop');  
  
-- *************************************************
-- p. 138 Using the Set Operators
-- *************************************************  
-- p.139 (UNION, UNION ALL. INTERSECT, MINUS)
-- p.140 What cannot be done! - TODO: Try some illegal stuff to check



-- p.141-142 -> UNION, UNION ALL, INTESECT, MINUS
SELECT col1 FROM table_setA
UNION
SELECT col1 FROM table_setB;

SELECT col1 FROM table_setA
UNION ALL
SELECT col1 FROM table_setB;

SELECT col1 FROM table_setA
INTERSECT
SELECT col1 FROM table_setB;

SELECT col1 FROM table_setA
MINUS
SELECT col1 FROM table_setB;

SELECT col1 FROM table_setB
MINUS
SELECT col1 FROM table_setA;

-- *************************************************
-- p. 145 Manipulating data
-- *************************************************  
-- TRUNCATE/DELETE:
  -- TODO: Review TRUNCATE and DELETE; particularly what DELETE deletes and how does it do that.
  -- TODO: p. 146 -> REVIEW!! Many terms, e.g. MINEXTENTs, NEXT storage parameter to be reviewed, temporary tables, etc.
  
-- INSERT rows into a table.
-- INSERT/UPDATE/DELETE/MERGE operations.
  
-- p.148 
INSERT INTO employees (emp_id, afl_id, emp_first, emp_last, emp_job, emp_supervisor, salary, start_date)
  VALUES (18, NULL, 'Guy' ,'Newberry', 'Mgr', 8, 98250, '07-jan-2012');	

  -- DELETE FROM employees where emp_id = 18 AND afl_id IS NULL AND  emp_first = 'Guy' AND emp_last='Newberry';

-- The two below are the same:
INSERT INTO employees (emp_id, afl_id, emp_first, emp_last, emp_job, emp_supervisor, salary, start_date)
  VALUES (18, NULL, 'Guy' ,'Newberry', 'Mgr', 8, NULL, NULL);    
INSERT INTO employees (emp_id, afl_id, emp_first, emp_last, emp_job, emp_supervisor)
  VALUES (18, NULL, 'Guy' ,'Newberry', 'Mgr', 8);    

-- DEFAULT column values:
ALTER TABLE employees MODIFY start_date DEFAULT SYSDATE);  

-- DEFAULT ON NULL USAGE; Even though we are attempting explicitly NULL -> the DEFAULT ON NULL will chage it to 01-JAN-2000:
  ALTER TABLE employees MODIFY start_date DEFAULT ON NULL '01-JAN-2000';
  --DELETE FROM employees where emp_id = 18 AND afl_id IS NULL AND  emp_first = 'Guy' AND emp_last='Newberry';
  INSERT INTO employees (emp_id, afl_id, emp_first, emp_last, emp_job, emp_supervisor, start_date)
    VALUES (18, NULL, 'Guy' ,'Newberry', 'Mgr', 8, NULL);	
  SELECT * FROM employees WHERE emp_id = 18;

-- p.151 INSERT using SUBQUERY

INSERT INTO aircraft_types (act_name, act_body_style, act_decks, act_seats)
  SELECT 'Boeing 787', act_body_style, act_decks, 300 FROM aircraft_types;
  
-- p.152 UPDATE rows in a table.
UPDATE employees SET emp_supervisor=18
  WHERE emp_supervisor = 9;

  -- This will fail as emp_supervisor is NOT NULL
  -- UPDATE employees SET emp_last=NULL
  --   WHERE emp_id = 12;

-- p.153-154. DELETE rows from a table.

  DELETE FROM employees WHERE emp_id = 9;
  DELETE FROM aircraft_types WHERE act_name NOT IN (SELECT act_name FROM aircraft_fleet_v);

-- p.154 Control transactions:
  -- COMMIT, ROLLBACK, SAVEPOINT, SET TRANSACTION, SET CONSTRAINT
  -- TODO: Review SET TRANSACTION, SET CONSTRAINT
  
  -- p.155 -> TODO: CODE.
  -- p.156 ROLLBACK TO SAVEPOINT B; ROLLBACK TO SAVEPOINT A; ROLLBACK;
  
  -- p.156 Uncommited transactions
  
  -- p.156 Commited transactions
  
  
-- ************************************
-- p.158 Using DDL statements to Create and Manage Tables
-- ************************************
  -- p.158 Data types available for columns
  
-- p.159 Create a simple table
  CREATE TABLE ocp_example (
    ocp_id NUMBER,
	  ocp_name VARCHAR2(20),
	  ocp_date DATE
  );
  
-- p.160
CREATE TABLE employees (
  emp_id NUMBER,
  afl_id NUMBER,
  emp_first VARCHAR2(10),
  emp_last VARCHAR2(10) NOT NULL,
  emp_job VARCHAR2(10),
  emp_supervisor NUMBER,
  salary NUMBER,
  start_date DATE DEFAULT SYSDATE,
    PRIMARY KEY (EMP_ID));
)

-- p.160 CTAS (Creat Table AS):
  CREATE TABLE employees_copy
    AS SELECT emp_first, emp_last, emp_job, start_date
	     FROM employees
		 WHERE start_date > START_DATE - 365;
		 
-- p.160 Database Object Naming Rules
  -- What is allowed what is not, what are max lengths; what does max length vary on?
  -- What names are allowed when table name is quoted
  -- TODO: Try to violate some of the limits.
  
-- P.161 Namespaces
  -- What schema objects share one spacename?
  -- What schema objects do have their own namespaces?
  -- Is index and sequence in the same namespace?
  -- Is sequence and table in the same namespace?
  -- Is constraint and index in the same namespace?
  -- Is private synonym and packages in the same name as tables? [p.161]
  
-- p.162 Schema references.
  -- p.163 
  
  SELECT * FROM hr.departments
    WHERE department_id < 70;

-- p.162 Altering a table
  --